;; == test using special form names
;; -*- clojure -*-
(const std (@import "std"))
(const expect std.testing.expect)

(defn ^usize when [^usize a]
  (return (+ a 2)))

(test "using special form names"
  (expect (= ('when 1) 3)))

;; == test conditionals tests
(const std (@import "std"))
(const expect std.testing.expect)

(test "if-not"
  (if-not false
    (expect true)
    (unreachable)))

(test "when with multiple forms"
  (var ^usize i 0)
  (when true
    (+= i 1)
    (+= i 2))
  (expect (= i 3)))

(test "when-not"
  (var ^usize i 0)
  (when-not false
    (+= i 1)
    (+= i 2))
  (expect (= i 3)))

(test "when-not with expression"
  (var ^usize a 0)
  (when-not (= a 1)
    (inc! a))
  (expect (= 1 a)))

(test "cond with assignments"
  (var ^usize diff 2)
  (cond
    (= diff 1) (inc! diff)
    :else (+= diff 2))
  (expect (= 4 diff)))

(test "if-some"
  (var ^?usize maybe_a 0)
  (if-some [a maybe_a]
    (set! maybe_a (+ a 1))
    (unreachable))
  (expect (= 1 maybe_a.?)))

(test "if-some no else"
  (var ^?usize maybe_a 0)
  (if-some [a maybe_a]
    (set! maybe_a (+ a 1)))
  (expect (= 1 maybe_a.?)))

(test "if-some no else nil"
  (var ^?usize maybe_a nil)
  (if-some [a maybe_a]
    (set! maybe_a (+ a 1)))
  (expect (= nil maybe_a)))

(test "if-some else"
  (var ^?usize maybe_a nil)
  (if-some [a maybe_a]
    (set! maybe_a (+ a 1))
    (set! maybe_a 2))
  (expect (= 2 maybe_a.?)))

(test "when-some"
  (var ^?usize maybe_a 0)
  (when-some [a maybe_a]
    (set! maybe_a (+ a 1))
    (set! maybe_a (+ maybe_a.? 2)))
  (expect (= 3 maybe_a.?)))

(test "when-some nil"
  (var ^?usize maybe_a nil)
  (when-some [a maybe_a]
    (set! maybe_a (+ a 1))
    (set! maybe_a (+ maybe_a.? 2)))
  (expect (= nil maybe_a)))

;; == test case
(const std (@import "std"))
(const expect std.testing.expect)

(test "case with assignment"
  (var buf "ab")
  (var ^usize i 0)

  (case (aget buf 0)
    \a (inc! i)
    (unreachable))
  (expect (= 1 i)))

(test "case with assignment in else"
  (var buf "ab")
  (var ^usize i 0)

  (case (aget buf 1)
    \a (inc! i)
    (set! i 5))
  (expect (= 5 i)))

(test "switch with nil"
  (var buf "ab")
  (var ^?bool a true)
  (set! a
    (case (aget buf 0)
      \b true
      nil))
  (expect (= nil a)))

;; == test Operators
(const std (@import "std"))
(const expect std.testing.expect)

(test "Addition"
  (expect (= 7 (+ 2 5)))

  (var ^i32 a 2)
  (+= a 5)
  (expect (= 7 a)))

(test "Wrapping Addition"
  (expect (= 0 (+% (@as u32 (.maxInt std.math u32)) 1)))

  (var ^u32 a (.maxInt std.math u32))
  (+%= a 1)
  (expect (= 0 a)))

(test "Subtraction"
  (expect (= -3 (- 2 5)))

  (var ^i32 a 2)
  (-= a 5)
  (expect (= -3 a)))

(test "Wrapping Subtraction"
  (expect (= (.maxInt std.math u32) (-% (@as u32 0) 1)))

  (var ^u32 a (@as u32 0))
  (-%= a 1)
  (expect (= (.maxInt std.math u32) a)))

(test "Negation"
  (expect (= -1 (- 0 1))))

(test "Wrapping Negation"
  (expect (= (.minInt std.math i32)
             (-% (@as i32 (.minInt std.math i32))))))

(test "Multiplication"
  (expect (= 10 (* 2 5))))

(test "Wrapping Multiplication"
  (expect (= 144 (*% (@as u8 200) 2))))

(test "Division"
  (expect (= 2 (/ 10 5))))

(test "Remainder Division"
  (expect (= 1 (% 10 3))))

(test "Bit Shift Left"
  (expect (= 256 (<< 1 8))))

(test "Bit Shift Right"
  (expect (= 5 (>> 10 1))))

(test "Bitwise AND"
  (expect (= 2r001 (& 2r011 2r101))))

(test "Bitwise OR"
  (expect (= 2r110 (| 2r010 2r100))))

(test "Bitwise XOR"
  (expect (= 2r110 (bit-xor 2r011 2r101))))

(test "Bitwise NOT"
  (expect (= (bit-not (@as u8 2r10101111)) 2r01010000)))

(test "Optionals unwrapping"
  (const ^?u32 value nil)
  (const unwrapped (orelse value 1234))
  (expect (= unwrapped 1234)))

(test "Optionals unwrapping shorthand"
  (const ^?u32 value 5678)
  (expect (= value.? 5678)))
  ;; TODO: maybe support (expect (= (? value) 5678))

(test "Error Unions unwrapping"
  (const ^anyerror!u32 value error.Broken)
  (const unwrapped (catch value 1234))
  (expect (= unwrapped 1234)))

(test "Boolean AND"
  (expect (= false (and false true))))

(test "Boolean OR"
  (expect (= true (or false true))))

(test "Boolean NOT"
  (expect (= true (not false))))

(test "Equals"
  (expect (= true (= 1 1))))

(test "Optionals nil equality"
  (const ^?u32 value nil)
  (expect (= nil value)))

(test "Not equal"
  (expect (= false (!= 1 1)))
  (expect (= false (not= 1 1))))

(test "Greater than"
  (expect (= true (> 2 1)))
  (expect (= false (> 2 2))))

(test "Greater or eaqual than"
  (expect (= true (>= 2 1)))
  (expect (= true (>= 2 2))))

(test "Less than"
  (expect (= true (< 1 2)))
  (expect (= false (< 2 2))))

(test "Less or equal than"
  (expect (= true (<= 1 2)))
  (expect (= true (<= 2 2))))

(test "Array concatenation"
  (const array1 ^"[_]u32" [1 2])
  (const array2 ^"[_]u32" [3 4])
  (const together (++ array1 array2))
  (expect (.eql std.mem u32 (& together) (& ^"[_]u32" [1 2 3 4]))))

(test "Array multiplication"
  (const pattern (** "ab" 3))
  (expect (.eql std.mem u8 pattern "ababab")))

(test "Pointer dereference"
  (const ^u32 x 1234)
  (const ptr (& x))
  (expect (= ptr.* 1234)))

(test "Address of"
  (const ^u32 x 1234)
  (const ptr (& x))
  (expect (= ptr.* 1234)))

;; TODO codegen looks good, perhaps a new feature not available in Zig 0.6.0
; (test "Merging Error Sets"
;   (const A (error One))
;   (const B (error Two))
;   (expect (= (error One Two) (|| A B))))
;; == test Comment form
(const std (@import "std"))
(const expect std.testing.expect)

(test "clj comment"
  (var ^i32 a 0)
  (comment
    (+= a 1)
    (+= a 2))
  (expect (= a 0)))
;; == test Bit operators aliases
(const std (@import "std"))
(const expect std.testing.expect)

(test "bit-and"
  (expect (= 2r001 (bit-and 2r011 2r101))))

(test "bit-or"
  (expect (= 2r110 (bit-or 2r010 2r100))))

(test "bit-shift-left"
  (expect (= 256 (bit-shift-left 1 8))))

(test "bit-shift-right"
  (expect (= 5 (bit-shift-right 10 1))))

;; == test More bitwise operators
(const std (@import "std"))
(const expect std.testing.expect)

;; TODO
; (test "test-bit-clear"
;   (expect (= 2r1101 (bit-clear 2r1111 1)))
;   (expect (= 2r1101 (bit-clear 2r1101 1))))

(test "test-bit-set"
  (expect (= 2r1111 (bit-set 2r1111 1)))
  (expect (= 2r1111 (bit-set 2r1101 1))))

(test "test-bit-flip"
  (expect (= 2r1101 (bit-flip 2r1111 1)))
  (expect (= 2r1111 (bit-flip 2r1101 1))))

(test "test-bit-test"
  (expect (= true (bit-test 2r1111 1)))
  (expect (= false (bit-test 2r1101 1))))

;; == test Operator aliases
(const expect (.. (@import "std") -testing -expect))

(test "mod"
  (expect (= 0 (mod 15 5)))
  (expect (= 1 (mod 7 2)))
  (expect (= 1 (mod 10 3))))

(test "rem"
  (expect (= -1 (rem -10 3))))

(test "zero?"
  (expect (zero? 0))
  (expect (zero? (- 2 2)))
  (expect (= true (zero? 0)))
  (expect (not (zero? 5)))
  (expect (= false (zero? 5))))

(test "inc"
  (expect (= 1 (inc 0)))
  (const ^usize i 1)
  (expect (= 2 (inc i))))

(test "inc!"
  (var ^usize i 0)
  (inc! i)
  (inc! i)
  (expect (= i 2)))

(test "dec"
  (expect (= -1 (dec 0)))
  (const ^usize i 2)
  (expect (= 1 (dec i))))

(test "dec!"
  (var ^usize i 2)
  (dec! i)
  (dec! i)
  (expect (= i 0)))

(test "pos?"
  (expect (pos? 1))
  (expect (pos? 0.1))
  (expect (not (pos? 0)))
  (expect (not (pos? -1)))
  (expect (not (pos? -0.1))))

(test "neg?"
  (expect (neg? -1))
  (expect (neg? -0.1))
  (expect (not (neg? 0)))
  (expect (not (neg? 1)))
  (expect (not (neg? 0.1))))

(test "even?"
  (expect (even? 2))
  (expect (not (even? 1))))

(test "odd?"
  (expect (odd? 1))
  (expect (not (odd? 2))))

;; == test Builtin at-prefixed functions
(const std (@import "std"))
(const expect std.testing.expect)

(test "@mod"
  (expect (= 0 (@mod 15 5)))
  (expect (= 1 (@mod 7 2)))
  (expect (= 1 (@mod 10 3))))

(test "@rem"
  (expect (= -1 (@rem -10 3))))

(test "@divTrunc"
  (expect (= -1 (@divTrunc -5 3))))

(test "@divFloor"
  (expect (= -2 (@divFloor -5 3))))

;; == test array aset
(const std (@import "std"))
(const expect std.testing.expect)

(test "using special form names"
  (var arr ^"[2][2]u8"
       [^"[2]u8" [0 0]
        ^"[2]u8" [3 0]])

  (expect (= 3 (aget arr 1 0)))

  (aset arr 1 0 5)

  (expect (= 5 (aget arr 1 0))))

;; == test slice with sentinel
(const expect (.. (@import "std") -testing -expect))
(const mem (.. (@import "std") -mem))

(test "slice with sentinel"
  (var ^"[4]u8" buf undefined)
  (aset buf 0 \h)
  (aset buf 1 \i)
  (aset buf 2 0)

  (const ^"[:0]const u8" s (slice buf 0 2 0))
  (expect (mem.eql u8 "hi" s)))

;; == test while-some
(const expect (.. (@import "std") -testing -expect))

(test "while-some"
  (var ^?usize optional_i 2)
  (var ^usize cnt 0)

  (while-some [i optional_i]
    (+= cnt (* i 2))
    (if (< 1 i)
      (set! optional_i (- i 1))
      (set! optional_i nil)))

  (expect (= cnt 6)))

(test "when in while"
  (var ^?usize a 1)
  (while-some [b a]
    (when (= b 1)
      (set! a nil)))
  (expect (= nil a)))

;; == test comptime expression

(const std (@import "std"))
(const expect std.testing.expect)

(test "comptime expression"
  (var items ^"[_]usize" [3 2 1])
  (std.sort.sort usize &items {} (comptime (.asc std.sort usize)))
  (expect (std.mem.eql usize (& ^"[_]usize" [1 2 3]) &items)))

;; == test try in expression

(const std (@import "std"))
(const expect std.testing.expect)

(test "try in expression"
  (var ^isize a -5)
  (var ^isize b 10)

  (expect (= 50 (* (try (std.math.absInt a))
                   (try (std.math.absInt b))))))

;; == run defn
(const print (.. (@import "std") -debug -print))

;; defn adds pub modifier by default, so main can run
(defn ^void main []
  (print "Hello\n" []))

;; == test opaque types
(const std (@import "std"))
(const mem std.mem)
(const expect std.testing.expect)

(const OpaqueA ^opaque {})
(const OpaqueB ^opaque {})
(test "opaque types"
  (expect (not= *OpaqueA *OpaqueB))
  (expect (mem.eql u8 (@typeName OpaqueA) "OpaqueA"))
  (expect (mem.eql u8 (@typeName OpaqueB) "OpaqueB")))

;; == test orelse
(const std (@import "std"))
(const expect std.testing.expect)

(test "orelse"
  (const ^?u32 value nil)
  (const unwrapped (orelse value 1234))
  (expect (= unwrapped 1234)))

;; == test nosuspend
(const expect (.. (@import "std") -testing -expect))

(defn- ^usize plusTwo [^usize x]
  (return (+ x 2)))

(test "nosuspend expression"
  (var a (nosuspend (plusTwo 3)))
  (expect (= 5 a)))

(test "nosuspend block"
  (var ^usize b 0)
  (nosuspend
    (+= b 2)
    (*= b 3))
  (expect (= 6 b)))

;; == test dotimes
(const expect (.. (@import "std") -testing -expect))

(test "dotimes"
  (var ^usize a 0)
  (dotimes [i 4]
    (+= a i))
  (expect (= 6 a)))

(test "dotimes with variable"
  (var ^usize a 0)
  (var ^usize b 4)
  (dotimes [i b]
    (+= a i))
  (expect (= 6 a)))

(test "dotimes with type hint"
  (var ^isize a 0)
  (dotimes [^isize i 4]
    (+= a i))
  (expect (= 6 a)))
