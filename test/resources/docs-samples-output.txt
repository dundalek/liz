;; == run hello
Hello, world!


;; == run hello_again

Hello, world!

;; == test comments

Test [1/1] test "comments"... 

All 1 tests passed.

;; == run values

1 + 1 = 2
7.0 / 3.0 = 2.33333325e+00
false
true
false

optional 1
type: ?[]const u8
value: null

optional 2
type: ?[]const u8
value: hi

error union 1
type: anyerror!i32
value: error.ArgNotFound

error union 2
type: anyerror!i32
value: 1234

;; == test string literals

Test [1/1] test "string literals"... 

All 1 tests passed.

;; == test namespaced_global.zig

Test [1/1] test "namespaced global variable"... 

All 1 tests passed.

;; == test Thread Local Variables

Test [1/1] test "thread local storage"... 

All 1 tests passed.

;; == test comptime variables

Test [1/1] test "comptime vars"... 

All 1 tests passed.

;; == test Arrays

Test [1/4] test "iterate over an array"... 
Test [2/4] test "modify an array"... 
Test [3/4] test "compile-time array initialization"... 
Test [4/4] test "array initialization with function calls"... 

All 4 tests passed.

;; == test infer_list_literal.zig

Test [1/1] test "fully anonymous list literal"... 

All 1 tests passed.

;; == test multidimensional.zig

Test [1/1] test "multidimensional arrays"... 

All 1 tests passed.

;; == test volatile

Test [1/1] test "volatile"... 

All 1 tests passed.

;; == test pointer casting

Test [1/2] test "pointer casting"... 
Test [2/2] test "pointer child type"... 

All 2 tests passed.

;; == test variable alignment

Test [1/1] test "variable alignment"... 

All 1 tests passed.

;; == test variable and function alignment

Test [1/2] test "global variable alignment"... 
Test [2/2] test "function alignment"... 

All 2 tests passed.

;; == test structs.zig

Test [1/4] test "dot product"... 
Test [2/4] test "struct namespaced variable"... 
Test [3/4] test "field parent pointer"... 
Test [4/4] test "linked list"... 

All 4 tests passed.

;; == test Default Field Values

Test [1/1] test "default struct initialization fields"... 

All 1 tests passed.

;; == test packed struct

Test [1/1] test "aligned struct fields"... 

All 1 tests passed.

;; == run struct_name.zig

variable: Foo
anonymous: struct:5:53
function: List(i32)

;; == test struct_result.zig

Test [1/1] test "anonymous struct literal"... 

All 1 tests passed.

;; == test struct_anon.zig

Test [1/1] test "fully anonymous struct"... 

All 1 tests passed.

;; == test tuple.zig

Test [1/1] test "tuple"... 

All 1 tests passed.

;; == test enums.zig

Test [1/7] test "enum ordinal value"... 
Test [2/7] test "set enum ordinal value"... 
Test [3/7] test "enum method"... 
Test [4/7] test "enum variant switch"... 
Test [5/7] test "std.meta.Tag"... 
Test [6/7] test "@typeInfo"... 
Test [7/7] test "@tagName"... 

All 7 tests passed.

;; == test Enum Literals

Test [1/2] test "enum literals"... 
Test [2/2] test "switch using enum literals"... 

All 2 tests passed.

;; == test Non-exhaustive enum

Test [1/1] test "switch on non-exhaustive enum"... 

All 1 tests passed.

;; == test union

Test [1/1] test "simple union"... 

All 1 tests passed.

;; == test Tagged union

Test [1/3] test "switch on tagged union"... 
Test [2/3] test "get tag type"... 
Test [3/3] test "coerce to enum"... 

All 3 tests passed.

;; == test Union method

Test [1/1] test "union method"... 

All 1 tests passed.

;; == test block separate scopes

Test [1/1] test "separate scopes"... 

All 1 tests passed.

;; == test switch

Test [1/2] test "switch simple"... 
Test [2/2] test "switch inside function"... 

All 2 tests passed.

;; == test switch tagged union

Test [1/1] test "switch on tagged union"... 

All 1 tests passed.

;; == test while basic

Test [1/1] test "while basic"... 

All 1 tests passed.

;; == test while break

Test [1/1] test "while break"... 

All 1 tests passed.

;; == test while continue

Test [1/1] test "while continue"... 

All 1 tests passed.

;; == test while continue expression

Test [1/2] test "while loop continue expression"... 
Test [2/2] test "while loop continue expression, more complicated"... 

All 2 tests passed.

;; == test while else

Test [1/1] test "while else"... 

All 1 tests passed.

;; == test Labeled while

Test [1/2] test "nested break"... 
Test [2/2] test "nested continue"... 

All 2 tests passed.

;; == test while with Optionals

Test [1/1] test "while null capture"... 

All 1 tests passed.

;; == test while with Error Unions

Test [1/1] test "while error union capture"... 

All 1 tests passed.

;; == test inline while

Test [1/1] test "inline while loop"... 

All 1 tests passed.

;; == test for

Test [1/3] test "for basics"... 
Test [2/3] test "for reference"... 
Test [3/3] test "for else"... 

All 3 tests passed.

;; == test Labeled for

Test [1/2] test "nested break"... 
Test [2/2] test "nested continue"... 

All 2 tests passed.

;; == test Inline for

Test [1/1] test "inline for loop"... 

All 1 tests passed.

;; == test if

Test [1/5] test "if expression"... 
Test [2/5] test "if boolean"... 
Test [3/5] test "if optional"... 
Test [4/5] test "if error union"... 
Test [5/5] test "if error union with optional"... 

All 5 tests passed.

;; == test defer

Test [1/3] test "defer basics"... 
Test [2/3] test "defer unwinding"... 
2 1 Test [3/3] test "errdefer unwinding"... 
start of function
end of function
start of function
encountered an error!
end of function

All 3 tests passed.

;; == test functions

Test [1/1] test "function"... 

All 1 tests passed.

;; == test Function Parameter Type Inference

Test [1/1] test "fn type inference"... 

All 1 tests passed.

;; == test Errors

Test [1/1] test "coerce subset to superset"... 

All 1 tests passed.

;; == test usingnamespace

Test [1/1] test "using std namespace"... 

All 1 tests passed.

;; == test async suspend

Test [1/1] test "suspend with no resume"... 

All 1 tests passed.

;; == test async suspend resume

Test [1/1] test "async function suspend with block"... 

All 1 tests passed.

;; == test async Resuming from Suspend Blocks

Test [1/1] test "resume from suspend"... 

All 1 tests passed.

;; == test async await

Test [1/1] test "async and await"... 

All 1 tests passed.

;; == test async function await

Test [1/1] test "async function await"... 

All 1 tests passed.

;; == run Async Function Example

readFile returning
fetchUrl returning
download_text: this is the downloaded url contents
file_text: this is the file contents

;; == run Blocking Function Example

fetchUrl returning
readFile returning
download_text: this is the downloaded url contents
file_text: this is the file contents

;; == test Pointers allowzero

Test [1/1] test "allowzero"... 

All 1 tests passed.

;; == test Builtin @field

Test [1/2] test "field access by string"... 
Test [2/2] test "decl access by string"... 

All 2 tests passed.

;; == test Builtin @reduce

Test [1/1] test "vector @reduce"... 

All 1 tests passed.
