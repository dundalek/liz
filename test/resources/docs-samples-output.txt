;; == run hello
Hello, world!


;; == run hello_again

Hello, world!

;; == test comments

1/1 test "comments"...OK
All 1 tests passed.

;; == run values

1 + 1 = 2
7.0 / 3.0 = 2.33333325e+00
false
true
false

optional 1
type: ?[]const u8
value: null

optional 2
type: ?[]const u8
value: hi

error union 1
type: anyerror!i32
value: error.ArgNotFound

error union 2
type: anyerror!i32
value: 1234

;; == test string literals

1/1 test "string literals"...OK
All 1 tests passed.

;; == test namespaced_global.zig

1/1 test "namespaced global variable"...OK
All 1 tests passed.

;; == test Thread Local Variables

1/1 test "thread local storage"...OK
All 1 tests passed.

;; == test comptime variables

1/1 test "comptime vars"...OK
All 1 tests passed.

;; == test Arrays

1/4 test "iterate over an array"...OK
2/4 test "modify an array"...OK
3/4 test "compile-time array initalization"...OK
4/4 test "array initialization with function calls"...OK
All 4 tests passed.

;; == test infer_list_literal.zig

1/1 test "fully anonymous list literal"...OK
All 1 tests passed.

;; == test multidimensional.zig

1/1 test "multidimensional arrays"...OK
All 1 tests passed.

;; == test volatile

1/1 test "volatile"...OK
All 1 tests passed.

;; == test pointer casting

1/2 test "pointer casting"...OK
2/2 test "pointer child type"...OK
All 2 tests passed.

;; == test structs.zig

1/4 test "dot product"...OK
2/4 test "struct namespaced variable"...OK
3/4 test "field parent pointer"...OK
4/4 test "linked list"...OK
All 4 tests passed.

;; == test Default Field Values

1/1 test "default struct initialization fields"...OK
All 1 tests passed.

;; == run struct_name.zig

variable: Foo
anonymous: struct:5:51
function: List(i32)

;; == test enums.zig

1/7 test "enum ordinal value"...OK
2/7 test "set enum ordinal value"...OK
3/7 test "enum method"...OK
4/7 test "enum variant switch"...OK
5/7 test "@TagType"...OK
6/7 test "@typeInfo"...OK
7/7 test "@tagName"...OK
All 7 tests passed.

;; == test Enum Literals

1/2 test "enum literals"...OK
2/2 test "switch using enum literals"...OK
All 2 tests passed.

;; == test Non-exhaustive enum

1/1 test "switch on non-exhaustive enum"...OK
All 1 tests passed.

;; == test union

1/1 test "simple union"...OK
All 1 tests passed.

;; == test Tagged union

1/3 test "switch on tagged union"...OK
2/3 test "@TagType"...OK
3/3 test "coerce to enum"...OK
All 3 tests passed.

;; == test Union method

1/1 test "union method"...OK
All 1 tests passed.

;; == test block separate scopes

1/1 test "separate scopes"...OK
All 1 tests passed.

;; == test switch

1/2 test "switch simple"...OK
2/2 test "switch inside function"...OK
All 2 tests passed.

;; == test switch tagged union

1/1 test "switch on tagged union"...OK
All 1 tests passed.

;; == test while basic

1/1 test "while basic"...OK
All 1 tests passed.

;; == test while break

1/1 test "while break"...OK
All 1 tests passed.

;; == test while continue

1/1 test "while continue"...OK
All 1 tests passed.

;; == test while continue expression

1/2 test "while loop continue expression"...OK
2/2 test "while loop continue expression, more complicated"...OK
All 2 tests passed.

;; == test while else

1/1 test "while else"...OK
All 1 tests passed.

;; == test Labeled while

1/2 test "nested break"...OK
2/2 test "nested continue"...OK
All 2 tests passed.

;; == test while with Optionals

1/1 test "while null capture"...OK
All 1 tests passed.

;; == test while with Error Unions

1/1 test "while error union capture"...OK
All 1 tests passed.

;; == test inline while

1/1 test "inline while loop"...OK
All 1 tests passed.

;; == test for

1/3 test "for basics"...OK
2/3 test "for reference"...OK
3/3 test "for else"...OK
All 3 tests passed.

;; == test Labeled for

1/2 test "nested break"...OK
2/2 test "nested continue"...OK
All 2 tests passed.

;; == test Inline for

1/1 test "inline for loop"...OK
All 1 tests passed.

;; == test if

1/5 test "if expression"...OK
2/5 test "if boolean"...OK
3/5 test "if optional"...OK
4/5 test "if error union"...OK
5/5 test "if error union with optional"...OK
All 5 tests passed.

;; == test defer

1/3 test "defer basics"...OK
2/3 test "defer unwinding"...
2 1 OK
3/3 test "errdefer unwinding"...
start of function
end of function

start of function
encountered an error!
end of function
OK
All 3 tests passed.
