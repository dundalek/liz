;; == test using special form names

Test [1/1] test "using special form names"... 

All 1 tests passed.

;; == test conditionals tests

Test [1/11] test "if-not"... 
Test [2/11] test "when with multiple forms"... 
Test [3/11] test "when-not"... 
Test [4/11] test "when-not with expression"... 
Test [5/11] test "cond with assignments"... 
Test [6/11] test "if-some"... 
Test [7/11] test "if-some no else"... 
Test [8/11] test "if-some no else nil"... 
Test [9/11] test "if-some else"... 
Test [10/11] test "when-some"... 
Test [11/11] test "when-some nil"... 

All 11 tests passed.

;; == test case

Test [1/3] test "case with assignment"... 
Test [2/3] test "case with assignment in else"... 
Test [3/3] test "switch with nil"... 

All 3 tests passed.

;; == test Operators

Test [1/33] test "Addition"... 
Test [2/33] test "Wrapping Addition"... 
Test [3/33] test "Subtraction"... 
Test [4/33] test "Wrapping Subtraction"... 
Test [5/33] test "Negation"... 
Test [6/33] test "Wrapping Negation"... 
Test [7/33] test "Multiplication"... 
Test [8/33] test "Wrapping Multiplication"... 
Test [9/33] test "Division"... 
Test [10/33] test "Remainder Division"... 
Test [11/33] test "Bit Shift Left"... 
Test [12/33] test "Bit Shift Right"... 
Test [13/33] test "Bitwise AND"... 
Test [14/33] test "Bitwise OR"... 
Test [15/33] test "Bitwise XOR"... 
Test [16/33] test "Bitwise NOT"... 
Test [17/33] test "Optionals unwrapping"... 
Test [18/33] test "Optionals unwrapping shorthand"... 
Test [19/33] test "Error Unions unwrapping"... 
Test [20/33] test "Boolean AND"... 
Test [21/33] test "Boolean OR"... 
Test [22/33] test "Boolean NOT"... 
Test [23/33] test "Equals"... 
Test [24/33] test "Optionals nil equality"... 
Test [25/33] test "Not equal"... 
Test [26/33] test "Greater than"... 
Test [27/33] test "Greater or eaqual than"... 
Test [28/33] test "Less than"... 
Test [29/33] test "Less or equal than"... 
Test [30/33] test "Array concatenation"... 
Test [31/33] test "Array multiplication"... 
Test [32/33] test "Pointer dereference"... 
Test [33/33] test "Address of"... 

All 33 tests passed.

;; == test Comment form

Test [1/1] test "clj comment"... 

All 1 tests passed.

;; == test Bit operators aliases

Test [1/4] test "bit-and"... 
Test [2/4] test "bit-or"... 
Test [3/4] test "bit-shift-left"... 
Test [4/4] test "bit-shift-right"... 

All 4 tests passed.

;; == test More bitwise operators

Test [1/3] test "test-bit-set"... 
Test [2/3] test "test-bit-flip"... 
Test [3/3] test "test-bit-test"... 

All 3 tests passed.

;; == test Operator aliases

Test [1/11] test "mod"... 
Test [2/11] test "rem"... 
Test [3/11] test "zero?"... 
Test [4/11] test "inc"... 
Test [5/11] test "inc!"... 
Test [6/11] test "dec"... 
Test [7/11] test "dec!"... 
Test [8/11] test "pos?"... 
Test [9/11] test "neg?"... 
Test [10/11] test "even?"... 
Test [11/11] test "odd?"... 

All 11 tests passed.

;; == test Builtin at-prefixed functions

Test [1/4] test "@mod"... 
Test [2/4] test "@rem"... 
Test [3/4] test "@divTrunc"... 
Test [4/4] test "@divFloor"... 

All 4 tests passed.

;; == test array aset

Test [1/1] test "using special form names"... 

All 1 tests passed.

;; == test slice with sentinel

Test [1/1] test "slice with sentinel"... 

All 1 tests passed.

;; == test while-some

Test [1/2] test "while-some"... 
Test [2/2] test "when in while"... 

All 2 tests passed.

;; == test comptime expression

Test [1/1] test "comptime expression"... 

All 1 tests passed.

;; == test try in expression

Test [1/1] test "try in expression"... 

All 1 tests passed.

;; == run defn

Hello

;; == test opaque types

Test [1/1] test "opaque types"... 

All 1 tests passed.

;; == test orelse

Test [1/1] test "orelse"... 

All 1 tests passed.

;; == test nosuspend

Test [1/2] test "nosuspend expression"... 
Test [2/2] test "nosuspend block"... 

All 2 tests passed.

;; == test dotimes

Test [1/3] test "dotimes"... 
Test [2/3] test "dotimes with variable"... 
Test [3/3] test "dotimes with type hint"... 

All 3 tests passed.

;; == translate Nameless Tests

test {
    _ = @import("b.zig");
}
